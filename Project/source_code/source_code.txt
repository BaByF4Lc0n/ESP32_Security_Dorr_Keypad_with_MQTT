#include <Keypad.h>
#include <LiquidCrystal.h>
#include <ESP32Servo.h>
#include <WiFi.h>
#include <PubSubClient.h>

const char ssid[] = "Wokwi-GUEST"; // ชื่อเครือข่าย WiFi 
const char password[] = ""; // รหัสผ่าน WiFi 
const char mqttServer[] = "119.8.188.243"; // เซิร์ฟเวอร์ MQTT 
const int mqttPort = 1883;
const char mqttTopic[] = "ESP32Kepwithmqtt"; // หัวข้อ MQTT 

WiFiClient espClient;
PubSubClient client(espClient);

const int servoPin = 25;
const uint8_t ROWS = 4;
const uint8_t COLS = 4;
char keys[ROWS][COLS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};
const char correctPassword[] = "159785"; // รหัสผ่านที่ถูกต้อง

LiquidCrystal lcd(18, 19, 16, 21, 22, 23); // ขาเชื่อมของ LCD 16x2 {RS , E , D4 , D5 , D6 , D7 }

uint8_t colPins[COLS] = { 12, 14, 27, 26 }; // ขา เชื่อมของแถวแนวนอน { C1, C2, C3, C4 }
uint8_t rowPins[ROWS] = { 15, 2, 0, 4 }; // ขา เชื่อมของแถวแนวตั้ง { R1, R2, R3, R4 }

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
Servo servo;
int pos = 0;
char enteredPassword[5]; // เก็บรหัสผ่าน
int passwordIndex = 0;
bool resetReceived = false;

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  
  // เช็คค่าที่มากับ MQTT message
  if ((char)payload[0] == 'a' && (char)payload[1] == 'c' && (char)payload[2] == 'c' && (char)payload[3] == 'e' && (char)payload[4] == 'p' && (char)payload[5] == 't') {
    servo.write(90); // หมุน servo 90 องศา
    delay(5000); // รอ 5 วิ
    servo.write(0); // หมุน servo กลับไปยังตำแหน่งเริ่มต้น
  }
  if (strncmp((char*)payload, "reset", length) == 0) {
    resetReceived = true; // รับคำสั่ง reset
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
      client.subscribe(mqttTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  lcd.begin(16, 2);
  servo.attach(servoPin, 500, 2400);

  setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if (resetReceived) {
    servo.write(90); // หมุน servo กลับไปที่ตำแหน่ง 0 องศา
    resetReceived = false; // รีเซ็ตค่าการรับคำสั่ง reset
  }

  char key = keypad.getKey();

  if (key) {
    if (key >= '0' && key <= '9') {
      enteredPassword[passwordIndex] = key;
      passwordIndex++;
      lcd.print(key);
    } else if (key == 'A') {
      if (passwordIndex > 0) {
        if (strncmp(enteredPassword, correctPassword, sizeof(correctPassword)) == 0) {
          lcd.clear();
          lcd.print("Unlocked");
        } else {
          lcd.clear();
          lcd.print("Incorrect");
          client.publish("notification", "incorrect");
          delay(2000);
        }
        passwordIndex = 0;
        memset(enteredPassword, 0, sizeof(enteredPassword));
      }
    } else if (key == 'D') {
      if (passwordIndex > 0) {
        passwordIndex--;
        lcd.setCursor(passwordIndex, 0);
        lcd.print(' ');
      }
    } else if (key == 'C') {
      passwordIndex = 0;
      memset(enteredPassword, 0, sizeof(enteredPassword));
      lcd.clear();
    }
  }
}
